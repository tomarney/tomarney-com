---
import FormattedDate from "./FormattedDate.astro";
import { getCollection } from "astro:content";

interface Props {
  typeFilter: string;
}

const { typeFilter = "all" } = Astro.props;

let entries = (await getCollection("publications")).sort(
  (a, b) => b.data.publishedDate.valueOf() - a.data.publishedDate.valueOf()
);

if (typeFilter !== "all") {
  entries = entries.filter((p) => p.data.type == typeFilter);
}
---

<ul class="not-prose list-none space-y-14 md:space-y-10 py-4">
  {
    entries.map((entry) => (
      <li class="group bg-stone-50/50 -my-4 py-4 -mx-3 px-3 border border-stone-100 hover:border-stone-200">
        <a href={`/publications/${entry.slug}/`}>
          <p class="text-lg font-medium text-stone-900 group-hover:underline group-hover:decoration-burgundy-500 group-hover:decoration-2">
            {entry.data.title}
          </p>

          <p class="font-normal text-stone-600 mt-1">
            {entry.data.authorList.map((author, idx, arr) => {
              let j = idx < arr.length - 1 ? ", " : "";
              if (author === "me") {
                return (<> <strong>T Arney</strong> {j}</>);
              } else {
                return <fragment set:text={author + j} />;
              }
            })}
          </p>

					<p class="font-normal text-stone-600 mt-2">
						{["Published", "In press", "Accepted"].includes(entry.data.status) &&
							entry.data.publication && (
									entry.data.publication
						)}

						{entry.data.status != "Published" && (
							<span>({entry.data.status})</span>
						)}
					</p>

          {entry.data.status == "Published" && (
            <p class="m-0 text-stone-600">
              <FormattedDate date={entry.data.publishedDate} />
            </p>
          )}
        </a>
      </li>
    ))
  }
</ul>
